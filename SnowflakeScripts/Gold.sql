CREATE OR REPLACE TABLE FINANCE_ANALYTICS.GOLD.STOCK_DAILY_ANALYTICS AS
SELECT
    s.DATE,
    s.SYMBOL,
    s.COMPANY_NAME,
    f.INDUSTRY,
    f.SECTOR,
    s.OPEN,
    s.HIGH,
    s.LOW,
    s.CLOSE,
    s.VOLUME,
    ROUND(s.CLOSE - s.OPEN, 2) AS DAILY_CHANGE,
    ROUND(((s.CLOSE - s.OPEN) / NULLIF(s.OPEN, 0)) * 100, 2) AS DAILY_PERCENT_CHANGE,
    CURRENT_TIMESTAMP() AS GENERATED_AT
FROM FINANCE_ANALYTICS.SILVER.STOCK_PRICES_CLEANED s
JOIN FINANCE_ANALYTICS.SILVER.COMPANY_FUNDAMENTALS_CLEANED f
    ON s.SYMBOL = f.SYMBOL;

CREATE OR REPLACE TABLE FINANCE_ANALYTICS.GOLD.STOCK_NEWS_SENTIMENT_SUMMARY AS
SELECT
    DATE(PUBLISHED_AT) AS NEWS_DATE,
    SYMBOL,
    COMPANY_NAME,
    COUNT(*) AS ARTICLE_COUNT,
    ROUND(AVG(TITLE_SENTIMENT), 3) AS AVG_TITLE_SENTIMENT,
    ROUND(MIN(TITLE_SENTIMENT), 3) AS MIN_TITLE_SENTIMENT,
    ROUND(MAX(TITLE_SENTIMENT), 3) AS MAX_TITLE_SENTIMENT,
    ROUND(AVG(DESC_SENTIMENT), 3) AS AVG_DESC_SENTIMENT,
    ROUND(MIN(DESC_SENTIMENT), 3) AS MIN_DESC_SENTIMENT,
    ROUND(MAX(DESC_SENTIMENT), 3) AS MAX_DESC_SENTIMENT,
    CURRENT_TIMESTAMP() AS GENERATED_AT
FROM FINANCE_ANALYTICS.SILVER.STOCK_NEWS_SENTIMENT_CLEANED
GROUP BY 1, 2, 3;

CREATE OR REPLACE TABLE FINANCE_ANALYTICS.GOLD.ECONOMIC_INDICATORS_LATEST AS
WITH latest_values AS (
    SELECT
        SERIES_ID,
        SERIES_NAME,
        DATE,
        VALUE,
        FIRST_VALUE(VALUE) IGNORE NULLS OVER (
            PARTITION BY SERIES_ID ORDER BY DATE DESC
        ) AS LATEST_VALUE
    FROM FINANCE_ANALYTICS.SILVER.ECONOMIC_INDICATORS_CLEANED
)
SELECT
    SERIES_ID,
    SERIES_NAME,
    MAX(DATE) AS LATEST_DATE,
    MAX(LATEST_VALUE) AS LATEST_VALUE,
    CURRENT_TIMESTAMP() AS GENERATED_AT
FROM latest_values
GROUP BY SERIES_ID, SERIES_NAME;


CREATE OR REPLACE TABLE FINANCE_ANALYTICS.GOLD.STOCK_SENTIMENT_KPI AS
SELECT
    s.DATE,
    s.SYMBOL,
    s.COMPANY_NAME,
    s.CLOSE AS STOCK_CLOSE,
    ns.AVG_TITLE_SENTIMENT,
    CASE
        WHEN ns.AVG_TITLE_SENTIMENT > 0.2 THEN 'POSITIVE'
        WHEN ns.AVG_TITLE_SENTIMENT < -0.2 THEN 'NEGATIVE'
        ELSE 'NEUTRAL'
    END AS TITLE_SENTIMENT_CLASS,
    ns.AVG_DESC_SENTIMENT,
    CASE
        WHEN ns.AVG_DESC_SENTIMENT > 0.2 THEN 'POSITIVE'
        WHEN ns.AVG_DESC_SENTIMENT < -0.2 THEN 'NEGATIVE'
        ELSE 'NEUTRAL'
    END AS DESC_SENTIMENT_CLASS,
    CURRENT_TIMESTAMP() AS GENERATED_AT
FROM FINANCE_ANALYTICS.GOLD.STOCK_DAILY_ANALYTICS s
LEFT JOIN FINANCE_ANALYTICS.GOLD.STOCK_NEWS_SENTIMENT_SUMMARY ns
    ON s.SYMBOL = ns.SYMBOL AND s.DATE = ns.NEWS_DATE;

CREATE OR REPLACE TABLE FINANCE_ANALYTICS.GOLD.DIM_COMPANY AS
SELECT DISTINCT
    SYMBOL,
    COMPANY_NAME,
    INDUSTRY,
    SECTOR,
    CEO,
    EXCHANGE,
    WEBSITE,
    IPO_DATE
FROM FINANCE_ANALYTICS.SILVER.COMPANY_FUNDAMENTALS_CLEANED;

CREATE OR REPLACE TABLE FINANCE_ANALYTICS.GOLD.DIM_ECONOMIC_SERIES AS
SELECT DISTINCT
    SERIES_ID,
    SERIES_NAME
FROM FINANCE_ANALYTICS.SILVER.ECONOMIC_INDICATORS_CLEANED;

CREATE OR REPLACE TABLE FINANCE_ANALYTICS.GOLD.FACT_STOCK_DAILY AS
SELECT
    s.DATE,
    s.SYMBOL,
    s.OPEN,
    s.HIGH,
    s.LOW,
    s.CLOSE,
    s.VOLUME,
    ROUND(s.CLOSE - s.OPEN, 2) AS PRICE_DIFF,
    ROUND(((s.CLOSE - s.OPEN) / NULLIF(s.OPEN, 0)) * 100, 2) AS PRICE_PCT_CHANGE
FROM FINANCE_ANALYTICS.SILVER.STOCK_PRICES_CLEANED s;

CREATE OR REPLACE TABLE FINANCE_ANALYTICS.GOLD.FACT_NEWS_SENTIMENT AS
SELECT
    DATE(PUBLISHED_AT) AS NEWS_DATE,
    SYMBOL,
    COUNT(*) AS ARTICLE_COUNT,
    AVG(TITLE_SENTIMENT) AS AVG_TITLE_SENTIMENT,
    STDDEV(TITLE_SENTIMENT) AS TITLE_SENTIMENT_VOLATILITY,
    AVG(DESC_SENTIMENT) AS AVG_DESC_SENTIMENT,
    STDDEV(DESC_SENTIMENT) AS DESC_SENTIMENT_VOLATILITY,
FROM FINANCE_ANALYTICS.SILVER.STOCK_NEWS_SENTIMENT_CLEANED
GROUP BY 1, 2;

CREATE OR REPLACE TABLE FINANCE_ANALYTICS.GOLD.FACT_ECONOMIC_INDICATORS AS
SELECT
    DATE,
    SERIES_ID,
    VALUE
FROM FINANCE_ANALYTICS.SILVER.ECONOMIC_INDICATORS_CLEANED;

CREATE OR REPLACE VIEW FINANCE_ANALYTICS.GOLD.VW_COMPANY_PERFORMANCE_DAILY AS
SELECT
    f.DATE,
    f.SYMBOL,
    c.COMPANY_NAME,
    c.SECTOR,
    c.INDUSTRY,
    f.CLOSE,
    f.PRICE_PCT_CHANGE,
    ns.AVG_TITLE_SENTIMENT,
    CASE
        WHEN ns.AVG_TITLE_SENTIMENT > 0.2 THEN 'POSITIVE'
        WHEN ns.AVG_TITLE_SENTIMENT < -0.2 THEN 'NEGATIVE'
        ELSE 'NEUTRAL'
    END AS TITLE_SENTIMENT_CLASS,
    ns.AVG_DESC_SENTIMENT,
    CASE
        WHEN ns.AVG_DESC_SENTIMENT > 0.2 THEN 'POSITIVE'
        WHEN ns.AVG_DESC_SENTIMENT < -0.2 THEN 'NEGATIVE'
        ELSE 'NEUTRAL'
    END AS DESC_SENTIMENT_CLASS,
FROM FINANCE_ANALYTICS.GOLD.FACT_STOCK_DAILY f
JOIN FINANCE_ANALYTICS.GOLD.DIM_COMPANY c ON f.SYMBOL = c.SYMBOL
LEFT JOIN FINANCE_ANALYTICS.GOLD.FACT_NEWS_SENTIMENT ns ON f.SYMBOL = ns.SYMBOL AND f.DATE = ns.NEWS_DATE;

CREATE OR REPLACE TABLE FINANCE_ANALYTICS.GOLD.SENTIMENT_CLASSIFICATION AS
SELECT
    *,
    CASE 
        WHEN TITLE_SENTIMENT > 0.2 THEN 'POSITIVE'
        WHEN TITLE_SENTIMENT < -0.2 THEN 'NEGATIVE'
        ELSE 'NEUTRAL'
    END AS TITLE_SENTIMENT_CLASS,
    CASE 
        WHEN DESC_SENTIMENT > 0.2 THEN 'POSITIVE'
        WHEN DESC_SENTIMENT < -0.2 THEN 'NEGATIVE'
        ELSE 'NEUTRAL'
    END AS DESC_SENTIMENT_CLASS
FROM FINANCE_ANALYTICS.SILVER.STOCK_NEWS_SENTIMENT_CLEANED;


-- CREATE OR REPLACE TABLE FINANCE_ANALYTICS.GOLD.STOCK_CLOSE_FORECAST AS
-- SELECT
--     SYMBOL,
--     DATE,
--     CLOSE,
--     ML_FORECAST(
--         INPUT_DATA => OBJECT_CONSTRUCT('DATE', DATE, 'VALUE', CLOSE),
--         TARGET_COLNAME => 'VALUE',
--         TIMESTAMP_COLNAME => 'DATE',
--         FORECAST_PERIODS => 7
--     ) AS FORECAST
-- FROM FINANCE_ANALYTICS.SILVER.STOCK_PRICES_CLEANED
-- GROUP BY SYMBOL, DATE, CLOSE;

